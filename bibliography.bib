@article{https://doi.org/10.1111/flan.12552,
	author = {Lichtman, Karen and VanPatten, Bill},
	title = {Was Krashen right? Forty years later},
	journal = {Foreign Language Annals},
	volume = {54},
	number = {2},
	pages = {283-305},
	keywords = {Communicative Language Teaching, High-Leverage Teaching Practices, Second Language Acquisition},
	doi = {https://doi.org/10.1111/flan.12552},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/flan.12552},
	eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1111/flan.12552},
	abstract = {Abstract In the late 1970s and early 1980s, Stephen Krashen developed Monitor Theory—a group of hypotheses explaining second language acquisition with implications for language teaching. As the L2 scholarly community began considering what requirements theories should meet, Monitor Theory was widely criticized and dismissed, along with its teaching implications. What happened to these ideas? We argue that many of them have evolved and are still driving SLA research today—often unacknowledged and under new terminology. In this essay, we focus on three of Krashen's five fundamental hypotheses: The Acquisition-Learning Distinction, The Natural Order Hypothesis, and The Input Hypothesis. We argue that these ideas persist today as the following constructs: implicit versus explicit learning, ordered development, and a central role for communicatively embedded input in all theories of second language acquisition. We conclude with implications for language teaching, including a focus on comprehensible input and communication in the classroom.},
	year = {2021}
}

@book{Krashen2003,
	author = {Krashen, Stephen},
	year = {2003},
	title = {Explorations in Language Acquisition and Use},
	isbn = {0-325-00554-0},
	publisher = {Heinemann}
}

@article{Ellis_2021,
	title={A short history of SLA: Where have we come from and where are we going?},
	volume={54},
	DOI={10.1017/S0261444820000038},
	number={2},
	journal={Language Teaching},
	author={Ellis, Rod},
	year={2021},
	pages={190–205}
}

@article{almarzouq2005open,
	title={Open source: Concepts, benefits, and challenges},
	author={AlMarzouq, Mohammad and Zheng, Li and Rong, Guang and Grover, Varun},
	journal={Communications of the Association for Information Systems},
	volume={16},
	number={1},
	pages={37},
	year={2005}
}

@article{Heron2013,
	title = {Open source and accessibility: advantages and limitations},
	journal = {Journal of Interaction Science},
	year={2013},
	author = {Heron, Michael and Hanson, Vicki L. and Ricketts, Ian},
	DOI = {10.1186/2194-0827-1-2},
	url = {https://doi.org/10.1186/2194-0827-1-2},
	ISSN = {2194-0827},
	volume = {1},
}

@misc{Typescript,
	author = {Radhika Vyas},
	title = {JavaScript vs. TypeScript: Is Typescript Becoming More Popular than Javascript?},
	url = {https://www.index.dev/blog/javascript-vs-typescript-popularity},
	year = {2025},
	note = {Consultado: 2025-04-15}
}

@InProceedings{10.1007/978-3-662-44202-9_11,
	author={Bierman, Gavin and Abadi, Martín and Torgersen, Mads},
	editor={Jones, Richard},
	title={Understanding TypeScript},
	booktitle={ECOOP 2014 -- Object-Oriented Programming},
	year={2014},
	publisher={Springer Berlin Heidelberg},
	address={Berlin, Heidelberg},
	pages={257--281},
	abstract={TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers---well-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules.},
	isbn={978-3-662-44202-9}
}


@inproceedings{Kleppmann,
	author = {Kleppmann, Martin and Wiggins, Adam and van Hardenberg, Peter and McGranaghan, Mark},
	title = {Local-first software: you own your data, in spite of the cloud},
	year = {2019},
	isbn = {9781450369954},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3359591.3359737},
	doi = {10.1145/3359591.3359737},
	abstract = {Cloud apps like Google Docs and Trello are popular because they enable real-time collaboration with colleagues, and they make it easy for us to access our work from all of our devices. However, by centralizing data storage on servers, cloud apps also take away ownership and agency from users. If a service shuts down, the software stops functioning, and data created with that software is lost. In this article we propose local-first software, a set of principles for software that enables both collaboration and ownership for users. Local-first ideals include the ability to work offline and collaborate across multiple devices, while also improving the security, privacy, long-term preservation, and user control of data. We survey existing approaches to data storage and sharing, ranging from email attachments to web apps to Firebase-backed mobile apps, and we examine the trade-offs of each. We look at Conflict-free Replicated Data Types (CRDTs): data structures that are multi-user from the ground up while also being fundamentally local and private. CRDTs have the potential to be a foundational technology for realizing local-first software. We share some of our findings from developing local-first software prototypes at the Ink \& Switch research lab over the course of several years. These experiments test the viability of CRDTs in practice, and explore the user interface challenges for this new data model. Lastly, we suggest some next steps for moving towards local-first software: for researchers, for app developers, and a startup opportunity for entrepreneurs.},
	booktitle = {Proceedings of the 2019 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
	pages = {154–178},
	numpages = {25},
	keywords = {peer-to-peer communication, mobile computing, data ownership, collaboration software, CRDTs},
	location = {Athens, Greece},
	series = {Onward! 2019}
}

@InProceedings{Kuhn,
	author =	{Kuhn, Roland and Melgratti, Hern\'{a}n and Tuosto, Emilio},
	title =	{{Behavioural Types for Local-First Software}},
	booktitle =	{37th European Conference on Object-Oriented Programming (ECOOP 2023)},
	pages =	{15:1--15:28},
	series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
	ISBN =	{978-3-95977-281-5},
	ISSN =	{1868-8969},
	year =	{2023},
	volume =	{263},
	editor =	{Ali, Karim and Salvaneschi, Guido},
	publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
	address =	{Dagstuhl, Germany},
	URL =		{https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.ECOOP.2023.15},
	URN =		{urn:nbn:de:0030-drops-182086},
	doi =		{10.4230/LIPIcs.ECOOP.2023.15},
	annote =	{Keywords: Distributed coordination, local-first software, behavioural types, publish-subscribe, asynchronous communication}
}
